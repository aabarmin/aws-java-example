AWSTemplateFormatVersion: 2010-09-09
Description: Template which creates VPC and minimal amount of other resources
Parameters:
  VPCName:
    Description: Name of VPC to create
    Type: String
    Default: Example VPC
  VPCRegion:
    Description: Region where VPC and other resources will be deployed
    Type: String
    Default: us-east-1
  EC2InstanceTemplateId:
    Description: ID of AMI
    Type: String
    Default: ami-02e136e904f3da870
  EC2InstanceType:
    Description: Size of EC2 instance to create
    Type: String
    Default: t3a.medium
  EC2KeyPairName:
    Description: EC2 SSH key pair name
    Type: String
    Default: abarmin-kp
  UserIP:
    Description: CIDR of the user IP, will get access via SSH and HTTP
    Type: String
    Default: 0.0.0.0/0
  ArtifactsBucketName:
    Description: Name of the bucket that will store artifacts
    Type: String
    Default: aws-java-example-artefacts

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.10.0.0/16
    PublicA:
      CIDR: 10.10.1.0/24
      AZ: a
      Name: public_a

Resources:
  ###############################################
  ### VPC
  ###############################################
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: Name
          Value: !Ref "VPCName"

  ###############################################
  ### Public Subnets
  ###############################################
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicA', 'CIDR']
      AvailabilityZone: !Join [ '', [ !Ref 'VPCRegion', !FindInMap ['SubnetConfig', 'PublicA', 'AZ'] ]]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !FindInMap ['SubnetConfig', 'PublicA', 'Name']
        - Key: Network
          Value: Public

  ###############################################
  ### Internet Gateway
  ###############################################
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: cloudx-igw
        - Key: Network
          Value: Public
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  ###############################################
  ### Routing Tables
  ###############################################
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public_rt
        - Key: Network
          Value: Public

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation0:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  ###############################################
  ### Security Groups
  ###############################################
  SecurityGroupEC2PoolSSHAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ec2_pool_ssh
      GroupDescription: allows access for ec2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref UserIP

  SecurityGroupEC2PoolWebAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ec2_pool_web
      GroupDescription: allows access for ec2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref UserIP

  ###############################################
  ### Bucket for artifacts
  ###############################################
  ArtifactsStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ArtifactsBucketName
      VersioningConfiguration:
        Status: Enabled

  ###############################################
  ### IAM role to get access to S3
  ###############################################
  ArifactStorageAccessRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Grants access to S3 to download artifacts
      RoleName: s3_access
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:Head"
                  - "s3-object-lambda:Get*"
                  - "s3-object-lambda:List*"
                Resource: !Join
                  - ''
                  - - !GetAtt ArtifactsStorage.Arn
                    - '/*'

  ArtifactStorageAccessRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: example_app_profile
      Path: "/"
      Roles:
        - !Ref ArifactStorageAccessRole

  ###############################################
  ### Launch template for EC2 instances
  ###############################################
  ChallengesAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: challenges-app-launch-template
      LaunchTemplateData:
        ImageId: !Ref EC2InstanceTemplateId
        InstanceType: !Ref EC2InstanceType
        IamInstanceProfile:
          Arn: !GetAtt ArtifactStorageAccessRoleInstanceProfile.Arn
        KeyName: !Ref EC2KeyPairName
        SecurityGroupIds:
          - !GetAtt SecurityGroupEC2PoolSSHAccess.GroupId
          - !GetAtt SecurityGroupEC2PoolWebAccess.GroupId
        UserData:
          Fn::Base64:
            !Sub
              - |
                #!/bin/bash -xe
                cd /opt

                # Installing Corretto JDK 17
                rpm --import https://yum.corretto.aws/corretto.key
                curl -L -o /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo
                yum install -y java-17-amazon-corretto-devel
                alternatives --set java /usr/lib/jvm/java-17-amazon-corretto/bin/java
                alternatives --set javac /usr/lib/jvm/java-17-amazon-corretto/bin/javac

                # Downloading latest versions of apps from S3
                aws s3 cp s3://${S3_BUCKET_NAME}/latest/challenges-provider.jar challenges-provider.jar
                aws s3 cp s3://${S3_BUCKET_NAME}/latest/discovery-server.jar discovery-server.jar
                aws s3 cp s3://${S3_BUCKET_NAME}/latest/provider-history.jar provider-history.jar
                aws s3 cp s3://${S3_BUCKET_NAME}/latest/provider-math.jar provider-math.jar

                # Downloading runner script
                aws s3 cp s3://${S3_BUCKET_NAME}/latest/app-run.sh app-run.sh
                chmod +x app-run.sh

                # Running all
                ./app-run.sh
              - S3_BUCKET_NAME: !Ref ArtifactsBucketName
